<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>JSP基础</title>
      <link href="/2022/04/16/JSP%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/"/>
      <url>/2022/04/16/JSP%E8%AF%AD%E6%B3%95%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h5 id="输出注释"><a href="#输出注释" class="headerlink" title="输出注释"></a>输出注释</h5><p>输出注释是指在客户端（浏览器）显示注释。这种注释和<strong>HTML</strong>中的注释相同，可以在浏览器查看源码中查看。</p><pre><code>&lt;!--注释内容--!&gt;</code></pre><h5 id="隐藏注释"><a href="#隐藏注释" class="headerlink" title="隐藏注释"></a>隐藏注释</h5><p>阴藏注释是指虽然写在jsp程序中，但是不会发送给客服端，在浏览器查看源码中不能查看。</p><pre><code>&lt;%--注释内容--%&gt;</code></pre><h3 id="JSP脚本元素"><a href="#JSP脚本元素" class="headerlink" title="JSP脚本元素"></a>JSP脚本元素</h3><h5 id="声明"><a href="#声明" class="headerlink" title="声明"></a>声明</h5><p>声明用来在JSP页面中声明变量和定义方法。<br>声明语法格式：</p><pre><code>&lt;%! 声明内容%&gt;</code></pre><h5 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h5><p>表达式元素表示的是一个在脚本元素中被定义的表达式，在运行后被自动转换为字符串，然后插入到这个表达式在JSP文件的位置显示。</p><h5 id="脚本程序"><a href="#脚本程序" class="headerlink" title="脚本程序"></a>脚本程序</h5><p>脚本程序是一段在客户端请求是先被服务器执行的Java代码，它可以产生输出，并把输出发送给客服的输出流，同时也可以是一段流程控制语句。</p><h3 id="page指令"><a href="#page指令" class="headerlink" title="page指令"></a>page指令</h3><h5 id="指令元素语法格式"><a href="#指令元素语法格式" class="headerlink" title="指令元素语法格式"></a>指令元素语法格式</h5><pre><code>&lt;%@ directive &#123;attr=&quot;&quot;&#125;*%&gt;</code></pre><p>page指令用于向容器提供与当前JSP页面相关的指令。可以在JSP页面的任何位置使用page指令进行编码。 按照惯例，page指令被编码在JSP页面的顶部。<br><strong>page指令可以出现多次，但是该指令中的属性只能出现一次，重复的属性设置将覆盖已有的设置</strong></p><h5 id="page指令格式"><a href="#page指令格式" class="headerlink" title="page指令格式"></a>page指令格式</h5><pre><code>&lt;%@ page attribute = &quot;value&quot; %&gt;</code></pre><h5 id="page属性"><a href="#page属性" class="headerlink" title="page属性"></a>page属性</h5><table><thead><tr><th>序号</th><th>属性</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td>buffer</td><td>指定输出流的缓冲模型。</td></tr><tr><td>2</td><td>autoFlush</td><td>控制servlet输出缓冲区的行为。</td></tr><tr><td>3</td><td>contentType</td><td>定义字符编码方案。</td></tr><tr><td>4</td><td>errorPage</td><td>定义另一个报告Java未检查运行时异常的JSP的URL。</td></tr><tr><td>5</td><td>isErrorPage</td><td>指示此JSP页面是否是由另一个JSP页面的<code>errorPage</code>属性指定的URL。</td></tr><tr><td>6</td><td>extends</td><td>指定生成的servlet必须扩展的超类。指定生成的servlet必须扩展的超类。</td></tr><tr><td>7</td><td>import</td><td>指定JSP中使用的包或类的列表，就像Java的<code>import</code>语句一样。</td></tr><tr><td>8</td><td>info</td><td>定义可以使用servlet的<code>getServletInfo()</code>方法访问的字符串。</td></tr><tr><td>9</td><td>isThreadSafe</td><td>定义生成的servlet的线程模型。</td></tr><tr><td>10</td><td>language</td><td>定义JSP页面中使用的编程语言。</td></tr><tr><td>11</td><td>session</td><td>指定JSP页面是否参与HTTP会话</td></tr><tr><td>12</td><td>isELIgnored</td><td>指定JSP页面中的EL表达式是否被忽略。</td></tr><tr><td>13</td><td>isScriptingEnabled</td><td>确定脚本元素是否被允许使用。</td></tr></tbody></table><p> <a href="https://www.yiibai.com/jsp/page_directive.html">page指令 - 属性详细</a> </p><h3 id="include指令"><a href="#include指令" class="headerlink" title="include指令"></a>include指令</h3><p> include指令用于在JSP页面中静态包含一个文件，该文件可以是JSP页面、HTML页面、文本文件、Java代码。使用include指令的JSP页面在转换是，JSP容器会在其中插入所包含文件的文本或代码，同时解析这个文件中的JSP语句，从而实现代码的重用，提到代码的使用效率。<br> include指令用于在编译阶段包括一个文件。这个指令告诉容器在编译阶段将其他外部文件的内容合并到当前JSP文件中。可在JSP页面的任何位置使用include指令进行编码。</p><h5 id="include指令格式"><a href="#include指令格式" class="headerlink" title="include指令格式"></a>include指令格式</h5><pre><code>&lt;%@ include file=&quot;url&quot; %&gt;</code></pre><h3 id="taglib指令"><a href="#taglib指令" class="headerlink" title="taglib指令"></a>taglib指令</h3><p> taglib指令用来定义一个标签库以及其自定义标签的前缀。</p><h5 id="taglib指令格式"><a href="#taglib指令格式" class="headerlink" title="taglib指令格式"></a>taglib指令格式</h5><pre><code>&lt;%@ taglib uri=&quot;uri&quot; prefix = &quot;prefixOfTag&quot; %&gt;</code></pre><p> 这里，uri属性值解析为容器理解的位置，并且prefix属性通知容器什么位置的标记是自定义操作。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Web技术概述</title>
      <link href="/2022/04/16/Web%E6%8A%80%E6%9C%AF%E6%A6%82%E8%BF%B0/"/>
      <url>/2022/04/16/Web%E6%8A%80%E6%9C%AF%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Web技术概述"><a href="#Web技术概述" class="headerlink" title="Web技术概述"></a>Web技术概述</h3><h5 id="静态网页"><a href="#静态网页" class="headerlink" title="静态网页"></a>静态网页</h5><p>静态网页是指没有后台数据库、不含程序、不可交互的网页。在网页设计中，纯粹HTML格式的页面通常被称为静态网页。静态页面无需经过服务器的编译，直接加载到客户浏览器上显示出来。静态页面需要占一定的服务器空间，且不能自主管理发布更新的页面</p><ul><li>静态页面没有数据库的支持，在网站制作和维护方面工作量较大，因为当网络信息量很大时，完全依靠静态页面制作方式比较困难</li><li>网页内容一经发布到网络服务器上，无论是否用户访问，每一个静态页面的内容都是保存在网站服务器上，也就是说，静态页面是实实在在保存在服务器上的文件，为一个网页都是独立的文件。</li><li>每一个静态页面都是有一个固定的url（统一资源定位符），且网页url以.htm、.html、.shtml等常见形式为后缀</li><li>静态页面的内容相对稳定，因此容易被搜索引擎检索</li><li>静态页面的交互性较差，在功能方面有较大的限制</li></ul><h5 id="动态页面"><a href="#动态页面" class="headerlink" title="动态页面"></a>动态页面</h5><p>动态页面是相对于静态页面而言，是指可交互、有后台数据库、含有程序的页面，动态页面显示的内容随着用户需求的改变而改变。动态页面一般以asp、jsp、php、aspx等为扩展名的页面文件。</p><ul><li>动态页面以数据库技术为基础，可以大大降低网站维护的工作量</li><li>动态页面实际上并不是独立存在于服务器上的网页文件，只是当用户请求时，服务器才返回一个完整的网页</li><li>采用动态网页技术的网站可以实现更多的功能，如用户注册、用户登录、在线调查、用户管理和订单管理等</li><li>搜索引擎一般不可能从一个网络的数据库中访问全部网页</li></ul><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><p>Web服务器是可以向发出请求的浏览器提供文档的程序。Web服务器不仅能够存储信息，还能在用户通过Web浏览器提供的信息的基础上运行脚本和程序。（PC+Web发布软件）</p><ul><li>服务器是一种被动程序：只有当Internet上运行其他计算机中的浏览器发出的请求时，服务器才会响应。</li><li>最常用的Web服务器是Apache和Microsoft的Internet信息服务器（Internet Information Services，IIS）。</li><li>Internet上的服务器也称为Web服务器，是一台在Internet上具有独立IP地址的计算机，可以向Internet上的客户机提供WWW、Email和FTP等各种Internet服务。</li><li>Web服务器是指驻留于因特网上某种类型计算机的程序。当Web浏览器（客户端）连到服务器上并请求文件时，服务器将处理该请求并将文件反馈到该浏览器上，附带的信息会告诉浏览器如何查看该文件（即文件类型）。服务器使用HTTP（超文本传输协议）与客户机浏览器进行信息交流。</li></ul><h3 id="Web数据库"><a href="#Web数据库" class="headerlink" title="Web数据库"></a>Web数据库</h3><p>Web数据库指在互联网中以Web查询接口方式访问的数据库资源。促进Internet发展的因素之一就是Web技术。由静态网页技术的HTML到动态网页技术的CGI、ASP、PHP、JSP等，Web技术经历了一个重要的变革过程。Web已经不再局限于仅仅由静态网页提供信息服务，而改变为动态的网页，可提供交互式的信息查询服务，使信息数据库服务成为了可能。Web数据库就是将数据库技术与Web技术融合在一起，使数据库系统成为Web的重要有机组成部分，从而实现数据库与网络技术的无缝结合。这一结合不仅把Web与数据库的所有优势集合在了一起，而且充分利用了大量已有数据库的信息资源。Web数据库由数据库服务器（Database Server）、中间件（Middle Ware）、Web服务器（Web Server）、浏览器（Browser）4部分组成。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
